@page "/admin/student-edit/{id:guid?}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IStudentAdminRepository StudentAdminRepository
@attribute [Authorize(Roles = "Admin")]

@inject IHostelAdminRepository HostelAdminRepository
@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminRepository ToDoListAdminRepository *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>Student Creation</PageTitle>
  }
  else
  {
    <PageTitle>Student Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>Student Creation</h1>
  }
  else
  {
    <h1>Student Modification</h1>
  }
  <article>
    <EditForm class="container" Model="studentAdminEditViewModel" OnSubmit="HandleSubmit">

      <div class="row">
        <div class="col">
          <label>
            Age:
            <InputNumber @bind-Value="studentAdminEditViewModel.Age" data-testid="studentAdminEditAge" />
          </label>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>
            First Name:
            <InputText @bind-Value="studentAdminEditViewModel.FirstName" data-testid="studentAdminEditFirstName" />
          </label>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>
            Hostel:
            <select @onchange="HostelOnChange">
              <option>Select hostel...</option>
                @if (hostelAdminDtos != null)
                {
                  @foreach (var hostel in hostelAdminDtos)
                  {
                    if (studentAdminEditViewModel.Hostel != null && studentAdminEditViewModel.Hostel.Id.Equals(hostel.Id))
                    {
                      <option value="@hostel.Id" selected>@hostel?.Name</option>
                    }
                    else
                    {
                      <option value="@hostel.Id">@hostel?.Name</option>
                    }
                  }
                }
              </select>
          </label>
        </div>
      </div>
      @* EditRowCodePlaceholder *@

      <div class="row">
        <div class="col">
          @if (!Id.Equals(Guid.Empty))
          {
            <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
          }
        </div>
        <div class="col">
          <a href="/admin/student-list">Cancel</a>
          @if (Id.Equals(Guid.Empty))
          {
            <button type="submit" class="btn btn-primary">Create</button>
          }
          else
          {
            <button type="submit" class="btn btn-primary">Modify</button>
          }
         </div>
      </div>
    </EditForm>
  </article>
</section>

@code {
  [Parameter]
  public Guid Id { get; set; }
  StudentAdminEditViewModel studentAdminEditViewModel { get; set; } = new StudentAdminEditViewModel();

  List<HostelAdminDto> hostelAdminDtos { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    await base.OnInitializedAsync();

    @* OnInitializedCodePlaceholder *@
  }

  protected override async Task OnParametersSetAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    var databaseStudentAdminDto = await StudentAdminRepository.GetByIdAsync(userName, Id);

    if (databaseStudentAdminDto == null)
    {
      studentAdminEditViewModel = new StudentAdminEditViewModel();
    }
    else
    {
      studentAdminEditViewModel = StudentAdminEditViewModel.FromStudentAdminDto(databaseStudentAdminDto);
    }
  }

  async Task HandleSubmit()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    @* RequiredPropertyPlaceholder *@

    var studentAdminDto = StudentAdminEditViewModel.ToStudentAdminDto(studentAdminEditViewModel);
    studentAdminDto.ApplicationUserName = userName;

    if (Id.Equals(Guid.Empty))
    {
      var newStudentAdminDto = await StudentAdminRepository.AddAsync(studentAdminDto);

      if (newStudentAdminDto == null)
      {
        return;
      }

      NavigationManager.NavigateTo($"/admin/student-edit/{newStudentAdminDto.Id}");
    }
    else
    {
      await StudentAdminRepository.EditAsync(studentAdminDto);
    }
  }

  async Task Remove()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name!;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    await StudentAdminRepository.DeleteAsync(userName, Id);
    NavigationManager.NavigateTo($"/admin/student-list");
  }

  @* OnChangeCodePlaceholder *@
}
