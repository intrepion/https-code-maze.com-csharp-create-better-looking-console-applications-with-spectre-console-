<h1>@Mode Hostel</h1>

<hr />
@if (Hostel is not null)
{
    <EditForm Model="Hostel" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Name:
                <InputText @bind-Value="Hostel.Name" @oninput="HandleNameChange" class="form-control"/>
            </label>
        </div>
        @* PropertyFormCodePlaceholder *@

        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Hostel? Hostel { get; set; }

    [Parameter]
    public Hostel? DbHostel { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    @* DeclareListCodePlaceholder *@

    protected override void OnInitialized()
    {
        @* OnInitialCodePlaceholder *@
        @* if (EmulatorCore?.Emulator != null && !IsAdd)
        {
            SelectedEmulatorId = EmulatorCore.Emulator.Id;
        } *@
    }

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleNameChange(ChangeEventArgs changeEventArgs)
    {
        if (Hostel == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        Hostel.NormalizedName = ((string)changeEventArgs.Value).ToUpperInvariant();

        // SpecializedCodeNamePlaceholder
    }

    // HandleChangeCodePlaceholder
}
