@page "/admin/hostel/view/{HostelId:guid}"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject EditSuccess EditSuccessState

<PageTitle>Hostel View</PageTitle>

@if (NotFound && !Loading)
{
  <div class="alert alert-warning">Hostel with that id doesn't exist.</div>
}
else
{
  @if (Hostel is null || Loading)
  {
    <div class="alert alert-info">Loading...</div>
  }
  else
  {
    @* <h1>Hostel Details</h1>
    <h6>ID: @Hostel.Id</h6> *@
    <h1>Hostel Details</h1>
    <h6>ID: @Hostel.Id</h6>
    @* PageHeaderCodePlaceholder *@

    <br />
    @if (EditSuccess)
    {
      <div class="alert alert-success">Successfully updated the Hostel.</div>
    }
    <hr />

    <div class="container-fluid">
      <table class="table table-hover table-primary table-striped">
        <thead>
          <tr>
            <th>Property</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>ID</td>
            <td>@Hostel.Id</td>
          </tr>
          <tr>
            <td>Name</td>
            <td>@Hostel?.Name</td>
          </tr>
          @* ViewPropertyCodePlaceholder *@
          @* <tr>
            <td>Employee</td>
            <td>@Hostel?.Employee?.FirstName @Hostel?.Employee?.LastName</td>
          </tr>
          <tr>
            <td>Manager</td>
            <td>@Hostel?.Manager?.FirstName @Hostel?.Manager?.LastName</td>
          </tr> *@
        </tbody>
      </table>
    </div>

    <div class="mt-4">
      <a class="btn btn-primary" title="Go Back" href="admin/hostel">
        Back to Grid
      </a>
      <span>&nbsp;</span>
      @if (!Deleted)
      {
        <a class="btn btn-primary" href="admin/hostel/edit/@Hostel.Id" title="Edit">Edit</a>

        <span>&nbsp;</span>
        @if (!ShowConfirmation)
        {
          <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
        }
        else
        {
          <br />
          <br />
          <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
        }
      }
      else
      {
        <div class="btn btn-danger">ðŸš« This Hostel has been deleted.</div>
      }
    </div>
  }
}

@code {
  private bool Loading;

  [Parameter]
  public Guid HostelId { get; set; }

  private Guid _lastHostelId;

  [Parameter]
  public bool EditSuccess { get; set; }

  private Hostel? Hostel { get; set; }

  private bool NotFound = false;

  private bool ShowConfirmation = false;

  private bool Deleted = false;

  protected override async Task OnParametersSetAsync()
  {
    if (_lastHostelId != HostelId)
    {
      EditSuccess = EditSuccessState.Success;
      EditSuccessState.Success = false;
      _lastHostelId = HostelId;
      await LoadHostelAsync();
    }
  }

  private async Task ConfirmAsync(bool result)
  {
    if (result)
    {
      await DeleteAsync();
    }
    else
    {
      ShowConfirmation = false;
      EditSuccess = false;
    }
  }

  private async Task LoadHostelAsync()
  {
    if (Loading)
    {
      return;
    }

    NotFound = false;
    Hostel = null;

    Loading = true;

    using var context = DbFactory.CreateDbContext();

    if (context.Hostels is not null)
    {
      Hostel = await context.Hostels
        @* IncludeCodePlaceholder *@
        @* .Include(x => x.Employee)
        .Include(x => x.Manager) *@
        .AsNoTracking()
        .SingleOrDefaultAsync(
          x => x.Id == HostelId);

      if (Hostel is null)
      {
        NotFound = true;
      }
    }

    Loading = false;
  }

  private async Task DeleteAsync()
  {
    if (Loading)
    {
      return;
    }

    Loading = true;
    using var context = DbFactory?.CreateDbContext();

    if (context?.Hostels is not null)
    {
      var hostel = await context.Hostels
        .SingleOrDefaultAsync(x => x.Id == HostelId);

      if (hostel is not null)
      {
        context.Hostels?.Remove(hostel);
        await context.SaveChangesAsync();
        Loading = false;
        Deleted = true;
      }
      else
      {
        Loading = false;
        await LoadHostelAsync();
      }
    }
    else
    {
      Loading = false;
      await LoadHostelAsync();
    }
  }
}
