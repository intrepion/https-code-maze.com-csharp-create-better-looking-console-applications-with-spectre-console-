@page "/admin/hostel"
@page "/admin/hostel/{Page:int}"
@rendermode InteractiveServer
@inject IHostelFilters Filters
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject HostelGridQueryAdapter QueryAdapter

<PageTitle>Hostel Home</PageTitle>

<h1>Hostel Home</h1>
<h6><a href="/admin/hostel/add">Create New</a></h6>

<GridWrapper @ref="Wrapper"
             FilterChanged="ReloadAsync"
             DeleteRequested="id => Wrapper.DeleteRequestId = id">
    <div class="container-fluid Hostels-grid">
        <div class="row">
            <div class="col-8"><TextFilter /></div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">
                Page @Filters.PageHelper.Page of @Filters.PageHelper.PageCount:
                showing @Filters.PageHelper.PageItems of
                @Filters.PageHelper.TotalItemCount items.
                <a disabled="@(Filters.Loading || !Filters.PageHelper.HasPrev)"
                   class="btn btn-primary @IsDisabled(Filters.PageHelper.HasPrev)"
                   href="@Filters.PageHelper.PrevPage">
                    Previous
                </a>
                <a disabled="@(Filters.Loading || !Filters.PageHelper.HasNext)"
                   class="btn btn-primary @IsDisabled(Filters.PageHelper.HasNext)"
                   href="@Filters.PageHelper.NextPage">
                    Next
                </a>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row hostel-header">
            <div class="col-2">&nbsp;</div>
            <div class="col-3"
                @onclick="@(async ()=>await ToggleAsync(HostelFilterColumns.Id))">
                <SortIndicator Column="@(HostelFilterColumns.Id)" />&nbsp;Id
            </div>

            <div class="col-3" @onclick="@(async ()=>await ToggleAsync(HostelFilterColumns.Name))">
                <SortIndicator Column="@(HostelFilterColumns.Name)" />&nbsp;Name
            </div>

            @* SortIndicatorCodePlaceholder *@

        </div>
        @if (Filters.Loading || Hostels is null)
        {
            <div class="row">
                <div class="col-12 alert alert-info">
                    Loading...
                </div>
            </div>
        }
        @if (Hostels is not null && Hostels.Count == 0)
        {
            <div class="row">
                <div class="col-12 alert alert-warning">
                    No Hostel found.
                </div>
            </div>
        }
        @if (Hostels is not null)
        {
            @foreach (var hostel in Hostels)
            {
                <HostelRow @key=hostel CurrentHostel="hostel"
                            DeleteHostel="DeleteHostelAsync" />
            }
        }
    </div>
</GridWrapper>

@code {
    [Parameter]
    public int Page
    {
        get => Filters.PageHelper.Page;
        set
        {
            Filters.PageHelper.Page = value;
        }
    }

    private GridWrapper Wrapper { get; set; } = new GridWrapper();

    private ICollection<Hostel>? Hostels { get; set; }

    private string IsDisabled(bool condition) =>
        !Filters.Loading && condition ? "" : "disabled";

    private int _lastPage = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        if (_lastPage < 1)
        {
            Navigation.NavigateTo("/admin/hostel/1");
            return;
        }

        if (Filters.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                Navigation.NavigateTo("/admin/hostel/1");
                return;
            }
            if (Page > Filters.PageHelper.PageCount)
            {
                Navigation.NavigateTo($"/admin/hostel/{Filters.PageHelper.PageCount}");
                return;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
    }

    private Task ToggleAsync(HostelFilterColumns col)
    {
        if (Filters.SortColumn == col)
        {
            Filters.SortAscending = !Filters.SortAscending;
        }
        else
        {
            Filters.SortColumn = col;
        }
        return ReloadAsync();
    }

    private async Task DeleteHostelAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Filters.Loading = true;

        if (Wrapper is not null && context.Hostels is not null)
        {
            var hostel = await context.Hostels
                .FirstAsync(x => x.Id == Wrapper.DeleteRequestId);

            if (hostel is not null)
            {
                context.Hostels?.Remove(hostel);
                await context.SaveChangesAsync();
            }
        }

        Filters.Loading = false;

        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        if (Filters.Loading || Page < 1)
        {
            return;
        }

        Filters.Loading = true;

        if (Wrapper is not null)
        {
            Wrapper.DeleteRequestId = Guid.Empty;
        }

        Hostels = new List<Hostel>();

        using var context = DbFactory.CreateDbContext();
        var query = context.Hostels?.AsQueryable();

        if (query is not null)
        {
            Hostels = await QueryAdapter.FetchAsync(query);
        }

        Filters.Loading = false;
    }
}

