@page "/admin/student/view/{StudentId:guid}"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject EditSuccess EditSuccessState

<PageTitle>Student View</PageTitle>

@if (NotFound && !Loading)
{
  <div class="alert alert-warning">Student with that id doesn't exist.</div>
}
else
{
  @if (Student is null || Loading)
  {
    <div class="alert alert-info">Loading...</div>
  }
  else
  {
    @* <h1>Student Details</h1>
    <h6>ID: @Student.Id</h6> *@
    <h1>Student Details</h1>
    <h6>ID: @Student.Id</h6>
    @* PageHeaderCodePlaceholder *@

    <br />
    @if (EditSuccess)
    {
      <div class="alert alert-success">Successfully updated the Student.</div>
    }
    <hr />

    <div class="container-fluid">
      <table class="table table-hover table-primary table-striped">
        <thead>
          <tr>
            <th>Property</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>ID</td>
            <td>@Student.Id</td>
          </tr>
          <tr>
            <td>Age</td>
            <td>@Student?.Age</td>
          </tr>
          <tr>
            <td>FirstName</td>
            <td>@Student?.FirstName</td>
          </tr>
          <tr>
            <td>LastName</td>
            <td>@Student?.LastName</td>
          </tr>
          @* ViewPropertyCodePlaceholder *@
          @* <tr>
            <td>Employee</td>
            <td>@Student?.Employee?.FirstName @Student?.Employee?.LastName</td>
          </tr>
          <tr>
            <td>Manager</td>
            <td>@Student?.Manager?.FirstName @Student?.Manager?.LastName</td>
          </tr> *@
        </tbody>
      </table>
    </div>

    <div class="mt-4">
      <a class="btn btn-primary" title="Go Back" href="admin/student">
        Back to Grid
      </a>
      <span>&nbsp;</span>
      @if (!Deleted)
      {
        <a class="btn btn-primary" href="admin/student/edit/@Student.Id" title="Edit">Edit</a>

        <span>&nbsp;</span>
        @if (!ShowConfirmation)
        {
          <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
        }
        else
        {
          <br />
          <br />
          <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
        }
      }
      else
      {
        <div class="btn btn-danger">ðŸš« This Student has been deleted.</div>
      }
    </div>
  }
}

@code {
  private bool Loading;

  [Parameter]
  public Guid StudentId { get; set; }

  private Guid _lastStudentId;

  [Parameter]
  public bool EditSuccess { get; set; }

  private Student? Student { get; set; }

  private bool NotFound = false;

  private bool ShowConfirmation = false;

  private bool Deleted = false;

  protected override async Task OnParametersSetAsync()
  {
    if (_lastStudentId != StudentId)
    {
      EditSuccess = EditSuccessState.Success;
      EditSuccessState.Success = false;
      _lastStudentId = StudentId;
      await LoadStudentAsync();
    }
  }

  private async Task ConfirmAsync(bool result)
  {
    if (result)
    {
      await DeleteAsync();
    }
    else
    {
      ShowConfirmation = false;
      EditSuccess = false;
    }
  }

  private async Task LoadStudentAsync()
  {
    if (Loading)
    {
      return;
    }

    NotFound = false;
    Student = null;

    Loading = true;

    using var context = DbFactory.CreateDbContext();

    if (context.Students is not null)
    {
      Student = await context.Students
        @* IncludeCodePlaceholder *@
        @* .Include(x => x.Employee)
        .Include(x => x.Manager) *@
        .AsNoTracking()
        .SingleOrDefaultAsync(
          x => x.Id == StudentId);

      if (Student is null)
      {
        NotFound = true;
      }
    }

    Loading = false;
  }

  private async Task DeleteAsync()
  {
    if (Loading)
    {
      return;
    }

    Loading = true;
    using var context = DbFactory?.CreateDbContext();

    if (context?.Students is not null)
    {
      var student = await context.Students
        .SingleOrDefaultAsync(x => x.Id == StudentId);

      if (student is not null)
      {
        context.Students?.Remove(student);
        await context.SaveChangesAsync();
        Loading = false;
        Deleted = true;
      }
      else
      {
        Loading = false;
        await LoadStudentAsync();
      }
    }
    else
    {
      Loading = false;
      await LoadStudentAsync();
    }
  }
}
