<h1>@Mode Student</h1>

<hr />
@if (Student is not null)
{
    <EditForm Model="Student" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Age</h2>
        <p>
            <label>
                Age:
                <InputNumber @bind-Value="Student.Age" @oninput="HandleAgeChange"/>
            </label>
        </p>
        <h2>First Name</h2>
        <p>
            <label>
                First Name:
                <InputText @bind-Value="Student.FirstName" @oninput="HandleFirstNameChange"/>
            </label>
        </p>
        <h2>Last Name</h2>
        <p>
            <label>
                Last Name:
                <InputText @bind-Value="Student.LastName" @oninput="HandleLastNameChange"/>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Student to upsert.
    [Parameter]
    public Student? Student { get; set; }

    // The database version of Student if a concurrency issue.
    [Parameter]
    public Student? DbStudent { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    // Handle form submission request.
    // isValid: True when field validation passed.
    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleAgeChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeAgePlaceholder
    }

    private void HandleFirstNameChange(ChangeEventArgs changeEventArgs)
    {
        if (Student == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        Student.NormalizedFirstName = ((string)changeEventArgs.Value).ToUpperInvariant();

        // NormalizedCodeFirstNamePlaceholder
    }

    // HandleChangeCodePlaceholder
}
